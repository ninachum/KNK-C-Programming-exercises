1.

(a), (g)
not (h).

2.

(d) - p is not a double-pointer.
(e) - legal
(f) - legal
(i) - legal, but meaningless.

3.

void avg_sum(double a[], int n, double *avg, double *sum)
{
	int i;

	*sum = 0.0;
	for (i = 0; i < n; i++) {
		*sum += a[i];
	}
	*avg = *sum / n;
}

4.

void swap(int *p, int *q)
{
	int temp;

	temp = *p;
	*p = *q;
	*q = temp;
}

5.

void split_time(long total_sec, int *hr, int *min, int *sec)
{
	*hr = total_sec / 3600;
	total_sec %= 3600;
	*min = total_sec / 60;
	*sec = total_sec % 60;
}

6.

void find_two_largest(int a[], int n, int *largest, int *second_largest)
{
	int i;
	*largest = a[0];


	for (i = 1; i < n; i++) {
		if (*largest < a[i]) {
			*second_largest = *largest;
			*largest = a[i];
		}
	}

}

7.

#include <stdio.h>

/*
1 31
2 28 or 29
3 31
4 30
5 31
6 30
7 31

8 31
9 30
10 31
11 30
12 31
*/

void split_date(int day_of_year, int year, int *month, int *day);

int main(void)
{
	int mm, dd, year, day_of_year;

	printf("Enter year: ");
	scanf("%d", &year);

	printf("Enter Nth day of year (1 - 366) ");
	scanf("%d", &day_of_year);

	split_date(day_of_year, year, &mm, &dd);

	printf("Result: %2d %2d\n", mm, dd);

	return 0;
}

void split_date(int day_of_year, int year, int *month, int *day)
{
	int days_in_months[12] = { 31, 28, 31, 30, 31, 30,
							   31, 31, 30, 31, 30, 31 };
	int i;

	/* check for leap year */
	if ((year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0)))
		days_in_months[1] = 29;

	for (i = 0; i < 12; i++) {
		if (days_in_months[i] - day_of_year >= 0) {
			*day = day_of_year;
			break;
		}
		
		else 
			day_of_year -= days_in_months[i];
		
	}
	*month = i + 1;
}

8.

int *find_largest(int a[], int n)
{
	int *largest = &a[0], i;

	for (i = 1; i < n; i++) {
		if (*largest < a[i]) {
			largest = &a[i];
		}
	}

	return largest;
}




