1.

(a) 14
(b) 34
(c) 4
(d) true
(e) false

2.

<why it is illegal?>
(a) pointer cannot be added another pointer. only integer can be added.
(b) pointer cannot be divided by a constant.

<how could it be fixed?>
(a) *middle = (*low + *high) / 2;

<how could it be fixed - correct && intended>

/* high - low returns distance measured in array elements, so it is not a pointer value and it can be divided by a constant. */
(a) middle = low + (high - low) / 2;

3.

{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}

4.

#include <stdbool.h>

#define STACK_SIZE 100

/* external variables */
int contents[STACK_SIZE];
int *top_ptr;

void make_empty(void)
{
	top_ptr = &contents[0];
}

bool is_empty(void)
{
	return top_ptr == &contents[0];
}

bool is_full(void)
{
	return top_ptr == &contents[STACK_SIZE];
}

void push(int i)
{
	if (is_null())
		stack_overflow();
	else
		*top_ptr++ = i;
}

int pop(void)
{
	if (is_empty())
		stack_underflow();
	else
		return *--top_ptr;
}

5.

(a) pointer and different variable - illegal
(b) pointer and pointer - legal. true
(c) an object that pointer is indicating, and same variable - legal. true
(d) array subscript using pointer, and the same array element - legal. true

6.

int sum_array(const int a[], int n)
{
	int sum;
	const int *p;

	sum = 0;
	for (p = a; p < a + n; p++) {
		sum += *p;
	}

	return sum;
}

7.

bool search(const int a[], int n, int key)
{
	const int *p;

	for (p = a; p < a + n; p++) {
		if (key == *p)
			return true;
	}
	return false;
}

8.

void store_zeroes(int a[], int n)
{
	int *p;

	for (p = a; p < a + n; p++) {
		*p = 0;
	}
}

9.

double inner_product(const double *a, const double *b, int n)
{
	double product = 0;
	const double *p = a, *q = b;

	while (p < a + n && q < b + n) {
		product += *p * *q;
		p++;
		q++;
	}

	return product;
}

10.

int *find_middle(int a[], int n)
{
	return (a + n / 2);
}

11.

int find_largest(int a[], int n)
{
	int *p, max;

	max = *a;
	for (p = a + 1; p < a + n; p++) {
		if (*p > max)
			max = *p;
	}

	return max;
}

12.

void find_two_largest(const int *a, int n, int *largest, int *second_largest)
{
	int *p;

	*largest = *a;
	*second_largest = *a;
	for (p = a + 1; p < a + n; p++) {
		if (*largest < *p) {
			*second_largest = *largest;
			*largest = *p;
		}
	}

}

13.

#include <stdio.h>

#define N 10

int main(void)
{
	double arr[N][N], *p;
	int counter = N;

	for (p = arr[0]; p < arr[N]; p++) {
		if (counter == N) {
			*p = 1;
			counter = 0;
		}
		else {
			*p = 0;
			counter++;
		}
	}

	counter = 0;
	for (p = arr[0]; p < arr[N]; p++) {
			printf("%f ", *p);
			counter++;
			if (counter == N) {
				printf("\n");
				counter = 0;
			}
	}

	return 0;
}

14.

#include <stdio.h>
#include <stdbool.h>

bool search(const int a[], int n, int key)
{
	const int *p;

	for (p = a; p < a + n; p++) {
		if (key == *p)
			return true;
	}
	return false;
}

int main(void)
{
	int temperatures[7][24] = { 32, 0 };

	bool result = search(temperatures[0], 7 * 24, 32);

	printf("%d\n", result);

	return 0;
}

15.

#include <stdio.h>

int main(void)
{
	int temperatures[7][24] = { 32, 0 };
	int *p, i = 0;

	for (p = temperatures[i]; p < temperatures[i + 1]; p++) {
		printf("%d ", *p);
	}
	/* 
	for (p = &temperatures[i][0]; p < &temperatures[i + 1][0]; p++) {
		printf("%d ", *p);
	}
	THIS WOULD BE O.K
	*/
	printf("\n");
}


16.

#include <stdio.h>

int find_largest(int a[], int n)
{
	int *p, max;

	max = *a;
	for (p = a; p < a + n; p++) {
		if (*p > max)
			max = *p;
	}

	return max;
}

int main(void)
{
	int temperatures[7][24] = { 32, 0, 34 };

	printf("result is: %d\n", find_largest(&temperatures[0][0], 24));
	printf("result is: %d\n", find_largest(&temperatures[1][0], 24));
	printf("result is: %d\n", find_largest(&temperatures[2][0], 24));
	printf("result is: %d\n", find_largest(&temperatures[3][0], 24));

	return 0;
}

17.

#include <stdio.h>
#define LEN 10

int sum_two_dimensional_array(const int a[], int n)
{
	int sum = 0;
	const int *p;

	for (p = a; p < a + n; p++) {
		sum += *p;
	}
	return sum;
}
/*
or... << n is 10 * LEN! >>

int sum_two_dimesional_array(const int a[][LEN], int n)
{
	int sum = 0;
	const int *p;

	for (p = &a[0][0]; p < &a[0][0] + n; p++)
		sum += *p;

	return sum;
}
*/

int main(void)
{
	int a[10][LEN] = { 0, 10, 20 };

	printf("%d\n", sum_two_dimensional_array(&a[0][0], 10 * LEN));

	return 0;
}

18.

/* n is total length (row * col) */
int evaluate_position(char board[])
{
	char *p;

	int white = 0, black = 0;

	for (p = board; p < board + 8 * 8; p++) {
		switch (*p) {
		case 'Q':
			white += 9;
			break;
		case 'R':
			white += 5;
			break;
		case 'B':
			white += 3;
			break;
		case 'N':
			white += 3;
			break;
		case 'P':
			white += 1;
			break;
		case 'q':
			black += 9;
			break;
		case 'r':
			black += 5;
			break;
		case 'b':
			black += 3;
			break;
		case 'n':
			black += 3;
			break;
		case 'p':
			black += 1;
			break;
		default:
			printf("\nThere's an exception.\n");
			break;
		}
	}

	return white - black;
}

/* alternative...
int evaluate_position(char board[8][8])
{
	char *p;

	int white = 0, black = 0;

	for (p = &board[0][0]; p < &board[0][0] + 8 * 8; p++) {
		switch (*p) {
		case 'Q':
			white += 9;
			break;
		case 'R':
			white += 5;
			break;
		case 'B':
			white += 3;
			break;
		case 'N':
			white += 3;
			break;
		case 'P':
			white += 1;
			break;
		case 'q':
			black += 9;
			break;
		case 'r':
			black += 5;
			break;
		case 'b':
			black += 3;
			break;
		case 'n':
			black += 3;
			break;
		case 'p':
			black += 1;
			break;
		default:
			printf("\nThere's an exception.\n");
			break;
		}
	}

	return white - black;
}
*/